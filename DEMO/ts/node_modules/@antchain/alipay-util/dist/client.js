"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const kitx = __importStar(require("kitx"));
function encode(str) {
    var result = encodeURIComponent(str);
    return result.replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
}
function replaceRepeatList(target, key, repeat) {
    for (var i = 0; i < repeat.length; i++) {
        var item = repeat[i];
        if (item && typeof item === 'object') {
            const keys = Object.keys(item);
            for (var j = 0; j < keys.length; j++) {
                target[`${key}.${i + 1}.${keys[j]}`] = item[keys[j]];
            }
        }
        else {
            target[`${key}.${i + 1}`] = item;
        }
    }
}
function flatParams(params) {
    var target = {};
    var keys = Object.keys(params);
    for (let i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = params[key];
        if (Array.isArray(value)) {
            replaceRepeatList(target, key, value);
        }
        else {
            target[key] = value;
        }
    }
    return target;
}
function normalize(params) {
    var list = [];
    var flated = flatParams(params);
    var keys = Object.keys(flated).sort();
    for (let i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = flated[key];
        list.push([encode(key), encode(value)]);
    }
    return list;
}
function canonicalize(normalized) {
    var fields = [];
    for (var i = 0; i < normalized.length; i++) {
        var [key, value] = normalized[i];
        fields.push(key + '=' + value);
    }
    return fields.join('&');
}
class Client {
    /**
     * Get timestamp
     * @return the string
     */
    static getTimestamp() {
        let date = new Date();
        let YYYY = date.getUTCFullYear();
        let MM = kitx.pad2(date.getUTCMonth() + 1);
        let DD = kitx.pad2(date.getUTCDate());
        let HH = kitx.pad2(date.getUTCHours());
        let mm = kitx.pad2(date.getUTCMinutes());
        let ss = kitx.pad2(date.getUTCSeconds());
        return `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}Z`;
    }
    /**
     * Judge if the api called success or not
     * @param res the response
     * @return the boolean
     */
    static hasError(res) {
        if (!res || !res.response) {
            return false;
        }
        if (res.response.result_code && res.response.result_code.toString().toLowerCase() !== 'ok') {
            return true;
        }
        return false;
    }
    /**
     * Calculate signature according to signedParams and secret
     * @param signedParams the signed string
     * @param secret the accesskey secret
     * @return the signature string
     */
    static getSignature(signedParams, secret) {
        var normalized = normalize(signedParams);
        var stringToSign = canonicalize(normalized);
        return kitx.sha1(stringToSign, secret, 'base64');
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map