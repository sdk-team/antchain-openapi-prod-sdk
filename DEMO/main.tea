import AlipayUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AlipayUtil.getTimestamp(),
    req_msg_id = Util.getNonce(),
    access_key = @accessKeyId,
    charset = 'UTF-8',
    baseSdkVersion = 'Tea-SDK',
    sdkVersion = 'Tea-SDK-20201230',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = @endpoint,
    user-agent = getUserAgent()
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AlipayUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AlipayUtil.hasError(res)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Get user agent
 * @return user agent
 */
function getUserAgent(): string {
  var userAgent = 'TeaClient/1.0.0';
  return Util.getUserAgent(userAgent);
}

// Demo类
model DemoClass {
  // 字符串测试
  someString?: string(name='someString', example='some string'),
  // 日期测试
  someDate?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='someDate', example='3'),
  // Boolean测试
  someBoolean?: boolean(name='someBoolean', example='true'),
  // 整数测试
  someInt?: integer(name='someInt', example='3'),
  // 列表测试
  someList?: [ string ](name='someList', example=''),
}

// 另一个Demo类
model AnotherClass {
  // 测试字段
  bar?: string(name='bar', example='some string'),
  // 引用字段
  ref?: DemoClass(name='ref', example=''),
  // 列表引用Struct
  refList?: [ DemoClass ](name='refList', example=''),
}

model StatusDemoGatewayCheckRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
  // ffff
  aaaa?: long(name='aaaa'),
  // ddddd
  same?: [ DemoClass ](name='same'),
}

model StatusDemoGatewayCheckResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: Demo接口，返回当前服务器当前状态
 * Summary: 检查服务状态
 */
async function statusDemoGatewayCheck(request: StatusDemoGatewayCheckRequest): StatusDemoGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return statusDemoGatewayCheckEx(request, runtime);
}

/**
 * Description: Demo接口，返回当前服务器当前状态
 * Summary: 检查服务状态
 */
async function statusDemoGatewayCheckEx(request: StatusDemoGatewayCheckRequest, runtime: Util.RuntimeOptions): StatusDemoGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.status', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model EchoDemoGatewayCheckRequest = {
  authToken?: string(name='auth_token'),
  productInstanceId?: string(name='product_instance_id'),
  regionName?: string(name='region_name'),
}

model EchoDemoGatewayCheckResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // aaa
  ddd?: long(name='ddd'),
}

/**
 * Description: Demo接口，返回当输入的值
 * Summary: 返回输入值
 */
async function echoDemoGatewayCheck(request: EchoDemoGatewayCheckRequest): EchoDemoGatewayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return echoDemoGatewayCheckEx(request, runtime);
}

/**
 * Description: Demo接口，返回当输入的值
 * Summary: 返回输入值
 */
async function echoDemoGatewayCheckEx(request: EchoDemoGatewayCheckRequest, runtime: Util.RuntimeOptions): EchoDemoGatewayCheckResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'demo.gateway.check.echo', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

