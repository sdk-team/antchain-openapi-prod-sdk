import AlipayUtil;
import Util;
import RPCUtil;

type @endpoint = string
type @regionId = string
type @accessKeyId = string
type @accessKeySecret = string
type @protocol = string
type @userAgent = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @securityToken = string

/**
 * Model for initing client
 */
model Config {
  accessKeyId?: string(description='accesskey id',default=''),
  accessKeySecret?: string(description='accesskey secret',default=''),
  securityToken?: string(description='security token',default=''),
  protocol?: string(description='http protocol',example='http',default='http'),
  readTimeout?: number(description='read timeout',example='10',default=''),
  connectTimeout?: number(description='connect timeout',example='10',default=''),
  httpProxy?: string(description='http proxy',example='http://localhost',default=''),
  httpsProxy?: string(description='https proxy',example='https://localhost',default=''),
  endpoint?: string(description='endpoint',example='cs.aliyuncs.com',default=''),
  noProxy?: string(description='proxy white list',example='http://localhost',default=''),
  maxIdleConns?: number(description='max idle conns',example='3',default=''),
  userAgent?: string(description='user agent',example='Alibabacloud/1',default=''),
  socks5Proxy?: string(description='socks5 proxy',default=''),
  socks5NetWork?: string(description='socks5 network',example='TCP',default=''),
}

/**
 * Init client with Config
 * @param config config contains the necessary information to create a client
 */
init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      code = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }

  @accessKeyId = config.accessKeyId;
  @accessKeySecret = config.accessKeySecret;
  @securityToken = config.securityToken;
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
}

/**
 * Encapsulate the request and invoke the network
 * @param action api name
 * @param protocol http or https
 * @param method e.g. GET
 * @param pathname pathname of every api
 * @param request which contains request params
 * @param runtime which controls some details of call api, such as retry times
 * @return the response
 */
api doRequest(version: string, action: string, protocol: string, method: string, pathname: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = pathname;
  __request.query = {
    method = action,
    version = version,
    sign_type = 'HmacSHA1',
    req_time = AlipayUtil.getTimestamp(),
    req_msg_id = Util.getNonce(),
    access_key = @accessKeyId,
    charset = 'UTF-8',
    baseSdkVersion = 'Tea-SDK',
    sdkVersion = 'Tea-SDK-20201127',
  };

  if (!Util.empty(@securityToken)) {
    __request.query.security_token = @securityToken;
  }

  __request.headers = {
    host = @endpoint,
    user-agent = getUserAgent()
  };

  var tmp = Util.anyifyMapValue(RPCUtil.query(request));
  __request.body = Util.toFormString(tmp);
  __request.headers.content-type = 'application/x-www-form-urlencoded';

  var signedParam = {
    ...__request.query,
    ...RPCUtil.query(request)
  };
  __request.query.sign = AlipayUtil.getSignature(signedParam, @accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var res = Util.assertAsMap(obj);
  var resp = Util.assertAsMap(res.response);

  if (AlipayUtil.hasError(res)) {
    throw {
      message = resp.result_msg,
      data = resp,
      code = resp.result_code
    };
  }
  return resp;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

/**
 * Get user agent
 * @return user agent
 */
function getUserAgent(): string {
  var userAgent = 'TeaClient/1.0.0';
  return Util.getUserAgent(userAgent);
}

// 键值对
model NameValuePair {
  // 键名
  name?: string(name='name', example='key'),
  // 键值
  value?: string(name='value', example='value'),
}

// 调用者信息
model InvokerInfo {
  // 调用渠道
  invokeChannel?: string(name='invoke_channel', example='ALIYUN_POP'),
  // 渠道的用户id
  invokeChannelUid?: string(name='invoke_channel_uid', example='1322233232'),
  // 8位金融云租户ID
  invokeTenant?: string(name='invoke_tenant', example='SHKWHXDJ'),
  // 调用者用户金融云id
  invokeUserId?: string(name='invoke_user_id', example='2088123213123'),
}

model CreateAntcloudGatewayxBizeventMessageRequest = {
  authToken?: string(name='auth_token'),
  // 业务消息内容，json格式
  bizContent?: string(name='biz_content'),
  // 消费方id，例如appId，tenantId，可以多个，多个之间使用","分割
  consumerId?: string(name='consumer_id'),
  // 消费者类型，例如TENANT, APP
  consumerType?: string(name='consumer_type'),
  // 消息发送过程中的唯一ID
  msgId?: string(name='msg_id'),
  // 消息事件编码
  msgKey?: string(name='msg_key'),
  // 消息类型，1：点对点，2: 广播消息
  msgType?: string(name='msg_type'),
  // 二级消息主题,订阅方可以过滤消息
  tags?: string(name='tags'),
  // 日期对应的timestamp
  utcTimestamp?: long(name='utc_timestamp'),
}

model CreateAntcloudGatewayxBizeventMessageResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
}

/**
 * Description: 接收业务事件消息，并将相关消息投递给对应的接手方
 * Summary: 事件消息创建
 */
async function createAntcloudGatewayxBizeventMessage(request: CreateAntcloudGatewayxBizeventMessageRequest): CreateAntcloudGatewayxBizeventMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntcloudGatewayxBizeventMessageEx(request, runtime);
}

/**
 * Description: 接收业务事件消息，并将相关消息投递给对应的接手方
 * Summary: 事件消息创建
 */
async function createAntcloudGatewayxBizeventMessageEx(request: CreateAntcloudGatewayxBizeventMessageRequest, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxBizeventMessageResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.bizevent.message.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model CreateAntcloudGatewayxFileUploadRequest = {
  authToken?: string(name='auth_token'),
  // 产品方的api归属集群，即productInstanceId
  apiCluster?: string(name='api_cluster'),
  // 上传文件作用的openapi method
  apiCode?: string(name='api_code'),
  // 文件标签，多个标签;分割
  fileLabel?: string(maxLength=100, name='file_label'),
  // 自定义的文件元数据
  fileMetadata?: string(maxLength=1000, name='file_metadata'),
  // 文件名，不传则随机生成文件名
  fileName?: string(maxLength=100, name='file_name'),
  // 文件的多媒体类型
  mimeType?: string(name='mime_type'),
}

model CreateAntcloudGatewayxFileUploadResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 上传有效期
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='expired_time'),
  // 32位文件唯一id
  fileId?: string(name='file_id'),
  // 放入http请求头里
  uploadHeaders?: [ NameValuePair ](name='upload_headers'),
  // 文件上传地址
  uploadUrl?: string(name='upload_url'),
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUpload(request: CreateAntcloudGatewayxFileUploadRequest): CreateAntcloudGatewayxFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntcloudGatewayxFileUploadEx(request, runtime);
}

/**
 * Description: 创建HTTP PUT提交的文件上传
 * Summary: 文件上传创建
 */
async function createAntcloudGatewayxFileUploadEx(request: CreateAntcloudGatewayxFileUploadRequest, runtime: Util.RuntimeOptions): CreateAntcloudGatewayxFileUploadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.upload.create', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

model GetAntcloudGatewayxFileDownloadRequest = {
  authToken?: string(name='auth_token'),
  // 文件唯一id
  fileId?: string(name='file_id'),
}

model GetAntcloudGatewayxFileDownloadResponse = {
  reqMsgId?: string(name='req_msg_id'),
  resultCode?: string(name='result_code'),
  resultMsg?: string(name='result_msg'),
  // 创建文件使用的apiCode
  apiCode?: string(name='api_code'),
  // 文件下载地址
  downloadUrl?: string(name='download_url'),
  // 下载超时时间
  expiredTime?: string(pattern='\\\\d{4}[-]\\\\d{1,2}[-]\\\\d{1,2}[T]\\\\d{2}:\\\\d{2}:\\\\d{2}[Z]', name='expired_time'),
  // 文件标签
  fileLabel?: string(name='file_label'),
  // 请求上传时的自定义元数据
  fileMetadata?: string(name='file_metadata'),
  // 文件名
  fileName?: string(name='file_name'),
  // 文件路径
  filePath?: string(name='file_path'),
  // 文件大小
  fileSize?: long(name='file_size'),
  // 上传的调用者信息
  uploadInvoker?: InvokerInfo(name='upload_invoker'),
}

/**
 * Description: 创建HTTP GET获取的文件下载
 * Summary: 下载地址获取
 */
async function getAntcloudGatewayxFileDownload(request: GetAntcloudGatewayxFileDownloadRequest): GetAntcloudGatewayxFileDownloadResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAntcloudGatewayxFileDownloadEx(request, runtime);
}

/**
 * Description: 创建HTTP GET获取的文件下载
 * Summary: 下载地址获取
 */
async function getAntcloudGatewayxFileDownloadEx(request: GetAntcloudGatewayxFileDownloadRequest, runtime: Util.RuntimeOptions): GetAntcloudGatewayxFileDownloadResponse {
  Util.validateModel(request);
  return doRequest('1.0' ,'antcloud.gatewayx.file.download.get', 'HTTPS', 'POST', `/gateway.do`, request, runtime);
}

