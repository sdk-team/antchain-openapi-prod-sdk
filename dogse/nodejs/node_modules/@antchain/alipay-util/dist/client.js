"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubResponse = exports.ErrRes = void 0;
// This file is auto-generated, don't edit it
/**
 * This is a utility module
 */
const oss_util_1 = __importDefault(require("@alicloud/oss-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
const tea_util_1 = __importDefault(require("@alicloud/tea-util"));
const httpx = __importStar(require("httpx"));
const kitx = __importStar(require("kitx"));
class ErrRes extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            response: 'response',
            sign: 'sign',
        };
    }
    static types() {
        return {
            response: SubResponse,
            sign: 'string'
        };
    }
}
exports.ErrRes = ErrRes;
class SubResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resultCode: 'result_code',
        };
    }
    static types() {
        return {
            resultCode: 'string',
        };
    }
}
exports.SubResponse = SubResponse;
function encode(str) {
    var result = encodeURIComponent(str);
    return result.replace(/!/g, '%21')
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29')
        .replace(/\*/g, '%2A');
}
function replaceRepeatList(target, key, repeat) {
    for (var i = 0; i < repeat.length; i++) {
        var item = repeat[i];
        if (item && typeof item === 'object') {
            const keys = Object.keys(item);
            for (var j = 0; j < keys.length; j++) {
                target[`${key}.${i + 1}.${keys[j]}`] = item[keys[j]];
            }
        }
        else {
            target[`${key}.${i + 1}`] = item;
        }
    }
}
function flatParams(params) {
    var target = {};
    var keys = Object.keys(params);
    for (let i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = params[key];
        if (Array.isArray(value)) {
            replaceRepeatList(target, key, value);
        }
        else {
            target[key] = value;
        }
    }
    return target;
}
function normalize(params) {
    var list = [];
    var flated = flatParams(params);
    var keys = Object.keys(flated).sort();
    for (let i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = flated[key];
        list.push([encode(key), encode(value)]);
    }
    return list;
}
function canonicalize(normalized) {
    var fields = [];
    for (var i = 0; i < normalized.length; i++) {
        var [key, value] = normalized[i];
        fields.push(key + '=' + value);
    }
    return fields.join('&');
}
class Client {
    /**
     * Get timestamp
     * @return the string
     */
    static getTimestamp() {
        let date = new Date();
        let YYYY = date.getUTCFullYear();
        let MM = kitx.pad2(date.getUTCMonth() + 1);
        let DD = kitx.pad2(date.getUTCDate());
        let HH = kitx.pad2(date.getUTCHours());
        let mm = kitx.pad2(date.getUTCMinutes());
        let ss = kitx.pad2(date.getUTCSeconds());
        return `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}Z`;
    }
    /**
     * Judge if the api called success or not
     * @param res the response
     * @return the boolean
     */
    static hasError(raw, secret) {
        var tmp;
        try {
            tmp = $tea.cast(JSON.parse(raw), new ErrRes());
        }
        catch (_a) {
            return true;
        }
        if (!tmp.response) {
            return true;
        }
        if (tmp.response.resultCode && tmp.response.resultCode.toLowerCase() != "ok") {
            return false;
        }
        if (!tmp.sign) {
            return true;
        }
        let s = raw.indexOf("response");
        let end = raw.indexOf("sign");
        let res = raw.substring(s, end);
        s = res.indexOf("{");
        end = res.lastIndexOf("}");
        let stringToSign = res.substring(s, end + 1);
        const sign = kitx.sha1(stringToSign, secret, 'base64');
        const signServer = tmp.sign;
        if (sign === signServer) {
            return false;
        }
        return true;
    }
    /**
     * Calculate signature according to signedParams and secret
     * @param signedParams the signed string
     * @param secret the accesskey secret
     * @return the signature string
     */
    static getSignature(signedParams, secret) {
        var normalized = normalize(signedParams);
        var stringToSign = canonicalize(normalized);
        return kitx.sha1(stringToSign, secret, 'base64');
    }
    /**
    * Upload item with urlPath
    * @param item the file
    * @param urlPath the upload url
    */
    static async putObject(item, headers, urlPath) {
        let options = {
            method: 'PUT',
            headers: headers
        };
        options.data = item;
        let response = await httpx.request(urlPath, options);
        if (response.statusCode >= 400 && response.statusCode < 600) {
            const errStr = await tea_util_1.default.readAsString(response);
            const respMap = oss_util_1.default.getErrMessage(errStr);
            if (respMap["Code"] != null && respMap["Code"] === 'CallbackFailed') {
                return null;
            }
            throw $tea.newError({
                "code": respMap["Code"],
                "message": respMap["Message"]
            });
        }
    }
    /**
   * Parse  headers into map[string]string
   * @param headers the target headers
   * @return the map[string]string
   */
    static parseUploadHeaders(headers) {
        const byt = JSON.stringify(headers);
        const tmp = JSON.parse(byt);
        if (Array.isArray(tmp)) {
            let result = {};
            for (let i = 0; i < tmp.length; i++) {
                const item = tmp[i];
                result[item["name"]] = item["value"];
            }
            return result;
        }
        else {
            return null;
        }
    }
    /**
   * Generate a nonce string
   * @return the nonce string
   */
    static getNonce() {
        return kitx.makeNonce().replace('-', '');
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map