/// <reference types="node" />
import * as $tea from '@alicloud/tea-typescript';
import { Readable } from 'stream';
export declare class ErrRes extends $tea.Model {
    response?: SubResponse;
    sign: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubResponse extends $tea.Model {
    resultCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    /**
     * Get timestamp
     * @return the string
     */
    static getTimestamp(): string;
    /**
     * Judge if the api called success or not
     * @param res the response
     * @return the boolean
     */
    static hasError(raw: string, secret: string): boolean;
    /**
     * Calculate signature according to signedParams and secret
     * @param signedParams the signed string
     * @param secret the accesskey secret
     * @return the signature string
     */
    static getSignature(signedParams: {
        [key: string]: string;
    }, secret: string): string;
    /**
    * Upload item with urlPath
    * @param item the file
    * @param urlPath the upload url
    */
    static putObject(item: Readable, headers: {
        [key: string]: string;
    }, urlPath: string): Promise<void>;
    /**
   * Parse  headers into map[string]string
   * @param headers the target headers
   * @return the map[string]string
   */
    static parseUploadHeaders(headers: any): {
        [key: string]: string;
    };
    /**
   * Generate a nonce string
   * @return the nonce string
   */
    static getNonce(): string;
}
