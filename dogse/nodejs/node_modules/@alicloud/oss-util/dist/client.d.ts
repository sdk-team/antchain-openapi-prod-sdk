/// <reference types="node" />
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class RuntimeOptions extends $tea.Model {
    autoretry?: boolean;
    ignoreSSL?: boolean;
    maxAttempts?: number;
    backoffPolicy?: string;
    backoffPeriod?: number;
    readTimeout?: number;
    connectTimeout?: number;
    localAddr?: string;
    httpProxy?: string;
    httpsProxy?: string;
    noProxy?: string;
    maxIdleConns?: number;
    socks5Proxy?: string;
    socks5NetWork?: string;
    uploadLimitSpeed?: number;
    listener?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    static getErrMessage(msg: string): {
        [key: string]: any;
    };
    static toMeta(val: {
        [key: string]: any;
    }, prefix: string): {
        [key: string]: string;
    };
    static parseMeta(val: {
        [key: string]: any;
    }, prefix: string): {
        [key: string]: string;
    };
    static getContentType(fileName: string): string;
    static getContentMD5(body: string, isEnableMD5: boolean): string;
    static encode(val: string, encodeType: string): string;
    static getUserAgent(val: string): string;
    static getHost(bucketName: string, regionId: string, endpoint: string, hostModel: string): string;
    static inject(body: Readable, res: {
        [key: string]: string;
    }): Readable;
    static getSignature(request: $tea.Request, bucketName: string, accessKeyId: string, accessKeySecret: string, signatureVersion?: string, addtionalHeaders?: string[]): string;
    static decode(val: string, decodeType: string): string;
}
